openapi: 3.1.0
info:
  title: Document Quality Gates API
  version: 0.1.0
  description: REST contracts for running section/document quality gates and retrieving traceability data.
servers:
  - url: https://localhost:5001/api/v1
paths:
  /documents/{documentId}/sections/{sectionId}/quality-gates/run:
    post:
      summary: Trigger quality gates for a single section.
      operationId: runSectionQualityGates
      security:
        - bearerAuth: []
      parameters:
        - name: documentId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: sectionId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                reason:
                  type: string
                  enum: [auto, manual, dashboard]
                  description: Indicates why the validation was triggered.
      responses:
        '202':
          description: Validation started.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RunAcknowledgement'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /documents/{documentId}/sections/{sectionId}/quality-gates/result:
    get:
      summary: Retrieve the latest section quality gate result.
      operationId: getSectionQualityGateResult
      security:
        - bearerAuth: []
      parameters:
        - name: documentId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: sectionId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Latest quality gate result.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SectionQualityGateResult'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /documents/{documentId}/quality-gates/run:
    post:
      summary: Re-run all quality gates for a document.
      operationId: runDocumentQualityGates
      security:
        - bearerAuth: []
      parameters:
        - name: documentId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '202':
          description: Batch validation initiated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RunAcknowledgement'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /documents/{documentId}/quality-gates/summary:
    get:
      summary: Retrieve aggregated document gate summary.
      operationId: getDocumentQualityGateSummary
      security:
        - bearerAuth: []
      parameters:
        - name: documentId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Aggregated gate summary for dashboard.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentQualityGateSummary'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /documents/{documentId}/traceability:
    get:
      summary: Fetch traceability matrix rows for a document.
      operationId: getTraceabilityMatrix
      security:
        - bearerAuth: []
      parameters:
        - name: documentId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: filter
          in: query
          required: false
          schema:
            type: string
            enum: [all, blockers, warnings, neutral, covered, orphaned]
      responses:
        '200':
          description: Traceability matrix rows.
          content:
            application/json:
              schema:
                type: object
                properties:
                  documentId:
                    type: string
                    format: uuid
                  rows:
                    type: array
                    items:
                      $ref: '#/components/schemas/TraceabilityLink'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /documents/{documentId}/traceability/{requirementId}/orphan:
    post:
      summary: Mark a requirement as orphaned when coverage disappears.
      operationId: orphanTraceabilityRequirement
      security:
        - bearerAuth: []
      parameters:
        - name: documentId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: requirementId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Requirement marked orphaned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TraceabilityLink'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    RunAcknowledgement:
      type: object
      required: [requestId, status]
      properties:
        requestId:
          type: string
          format: uuid
        status:
          type: string
          enum: [queued, running]
        triggeredBy:
          type: string
          format: uuid
        estimatedCompletionSeconds:
          type: number
          description: SLA guidance for UI progress copy.
    SectionQualityGateResult:
      type: object
      required:
        - sectionId
        - documentId
        - runId
        - status
        - rules
        - lastRunAt
        - triggeredBy
      properties:
        sectionId:
          type: string
          format: uuid
        documentId:
          type: string
          format: uuid
        runId:
          type: string
          format: uuid
        status:
          $ref: '#/components/schemas/QualityStatus'
        rules:
          type: array
          items:
            $ref: '#/components/schemas/GateRuleResult'
        lastRunAt:
          type: string
          format: date-time
        lastSuccessAt:
          type: string
          format: date-time
          nullable: true
        triggeredBy:
          type: string
          format: uuid
        source:
          type: string
          enum: [auto, manual, dashboard]
        durationMs:
          type: integer
        remediationState:
          type: string
          enum: [pending, in-progress, resolved]
    GateRuleResult:
      type: object
      required:
        - ruleId
        - title
        - severity
        - guidance
      properties:
        ruleId:
          type: string
        title:
          type: string
        severity:
          $ref: '#/components/schemas/QualityStatus'
        guidance:
          type: array
          items:
            type: string
        docLink:
          type: string
          nullable: true
        location:
          type: object
          required: [path, start, end]
          properties:
            path:
              type: string
            start:
              type: integer
            end:
              type: integer
        resolvedAt:
          type: string
          format: date-time
          nullable: true
    DocumentQualityGateSummary:
      type: object
      required:
        - documentId
        - statusCounts
        - blockerSections
        - warningSections
        - lastRunAt
        - triggeredBy
        - requestId
        - publishBlocked
      properties:
        documentId:
          type: string
          format: uuid
        statusCounts:
          type: object
          properties:
            pass:
              type: integer
            warning:
              type: integer
            blocker:
              type: integer
            neutral:
              type: integer
        blockerSections:
          type: array
          items:
            type: string
            format: uuid
        warningSections:
          type: array
          items:
            type: string
            format: uuid
        lastRunAt:
          type: string
          format: date-time
        triggeredBy:
          type: string
          format: uuid
        requestId:
          type: string
          format: uuid
        publishBlocked:
          type: boolean
        coverageGaps:
          type: array
          items:
            $ref: '#/components/schemas/RequirementGap'
    RequirementGap:
      type: object
      required:
        - requirementId
        - reason
      properties:
        requirementId:
          type: string
        reason:
          type: string
          enum: [no-link, blocker, warning-override]
        linkedSections:
          type: array
          items:
            type: string
            format: uuid
    TraceabilityLink:
      type: object
      required:
        - requirementId
        - sectionId
        - documentId
        - revisionId
        - gateStatus
        - coverageStatus
        - lastValidatedAt
      properties:
        requirementId:
          type: string
        sectionId:
          type: string
          format: uuid
        documentId:
          type: string
          format: uuid
        revisionId:
          type: string
        gateStatus:
          $ref: '#/components/schemas/QualityStatus'
        coverageStatus:
          type: string
          enum: [covered, warning, blocker, orphaned]
        lastValidatedAt:
          type: string
          format: date-time
        validatedBy:
          type: string
          format: uuid
        notes:
          type: array
          items:
            type: string
        auditTrail:
          type: array
          items:
            $ref: '#/components/schemas/TraceabilityAuditEvent'
    TraceabilityAuditEvent:
      type: object
      required:
        - eventId
        - type
        - timestamp
        - actorId
      properties:
        eventId:
          type: string
          format: uuid
        type:
          type: string
          enum: [link-created, link-updated, link-orphaned, link-reassigned]
        timestamp:
          type: string
          format: date-time
        actorId:
          type: string
          format: uuid
        details:
          type: object
          additionalProperties:
            type: string
    QualityStatus:
      type: string
      enum: [Pass, Warning, Blocker, Neutral]
  responses:
    UnauthorizedError:
      description: Missing or invalid authentication token.
    ForbiddenError:
      description: Authenticated but lacking permission for this document.
    NotFoundError:
      description: Referenced resource not found.
