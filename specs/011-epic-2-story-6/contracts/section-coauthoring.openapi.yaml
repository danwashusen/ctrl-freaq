openapi: 3.1.0
info:
  title: Conversational Co-Authoring API
  version: 0.1.0
  description: >-
    Endpoints enabling section-scoped conversational assistance, proposal
    generation, and approval flows. Sessions remain client-owned; server
    enforces scope and audit logging while streaming responses via SSE.
servers:
  - url: http://localhost:5001
paths:
  /api/documents/{documentId}/sections/{sectionId}/co-author/analyze:
    post:
      summary: Generate conversational guidance without mutating content
      operationId: postCoAuthorAnalyze
      tags: [CoAuthoring]
      parameters:
        - $ref: '#/components/parameters/DocumentId'
        - $ref: '#/components/parameters/SectionId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnalyzeRequest'
      responses:
        '200':
          description: Guidance returned synchronously when lightweight
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnalyzeResponse'
        '202':
          description: Streaming response initiated via SSE
          headers:
            HX-Stream-Location:
              description: Relative URL to subscribe for event stream
              schema:
                type: string
        '401':
          $ref: '#/components/responses/Unauthorized'
        '422':
          description: Invalid intent or scope selection
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/documents/{documentId}/sections/{sectionId}/co-author/proposal:
    post:
      summary: Request an AI-generated proposal diff for the active session
      operationId: postCoAuthorProposal
      tags: [CoAuthoring]
      parameters:
        - $ref: '#/components/parameters/DocumentId'
        - $ref: '#/components/parameters/SectionId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProposalRequest'
      responses:
        '200':
          description: Proposal delivered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProposalResponse'
        '202':
          description: Proposal will stream via SSE; client should attach to
            provided stream endpoint
          headers:
            HX-Stream-Location:
              schema:
                type: string
        '409':
          description: Baseline mismatch or draft conflict detected
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /api/documents/{documentId}/sections/{sectionId}/co-author/apply:
    post:
      summary: Approve a proposal and queue it for draft persistence + changelog
      operationId: postCoAuthorApply
      tags: [CoAuthoring]
      parameters:
        - $ref: '#/components/parameters/DocumentId'
        - $ref: '#/components/parameters/SectionId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApplyRequest'
      responses:
        '200':
          description: Proposal accepted and queued behind draft persistence
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplyResponse'
        '404':
          description: Proposal no longer available (session expired)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /api/documents/{documentId}/sections/{sectionId}/co-author/proposal/reject:
    post:
      summary: Dismiss a pending AI proposal without applying it
      operationId: postCoAuthorRejectProposal
      tags: [CoAuthoring]
      parameters:
        - $ref: '#/components/parameters/DocumentId'
        - $ref: '#/components/parameters/SectionId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RejectProposalRequest'
      responses:
        '204':
          description: Proposal dismissed and removed from session
        '400':
          description: Missing session or proposal identifiers
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /api/documents/{documentId}/sections/{sectionId}/co-author/teardown:
    post:
      summary: Tear down a co-authoring session and purge server state
      operationId: postCoAuthorTeardown
      tags: [CoAuthoring]
      parameters:
        - $ref: '#/components/parameters/DocumentId'
        - $ref: '#/components/parameters/SectionId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TeardownSessionRequest'
      responses:
        '204':
          description: Session state cleared
        '400':
          description: Missing session identifier
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'

components:
  securitySchemes:
    clerkSession:
      type: http
      scheme: bearer
      bearerFormat: JWT
  parameters:
    DocumentId:
      name: documentId
      in: path
      required: true
      schema:
        type: string
    SectionId:
      name: sectionId
      in: path
      required: true
      schema:
        type: string
  responses:
    Unauthorized:
      description: Authentication required
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
  schemas:
    AnalyzeRequest:
      type: object
      required: [sessionId, intent, prompt]
      properties:
        sessionId:
          type: string
          format: uuid
        intent:
          type: string
          enum: [explain, outline, improve]
        prompt:
          type: string
          minLength: 1
        contextSelections:
          type: object
          additionalProperties:
            type: boolean
          description: Map of decision/knowledge identifiers selected by the author
        includeDocument:
          type: boolean
          description: Must be true per clarification (entire document dispatched)
          default: true
    AnalyzeResponse:
      type: object
      required: [sessionId, turn]
      properties:
        sessionId:
          type: string
        turn:
          $ref: '#/components/schemas/ConversationTurn'
    ConversationTurn:
      type: object
      required: [turnId, intent, speaker, message, citations]
      properties:
        turnId:
          type: string
        intent:
          type: string
          enum: [explain, outline, improve]
        speaker:
          type: string
          enum: [author, assistant, system]
        message:
          type: string
        citations:
          type: array
          items:
            type: string
        confidence:
          type: number
          minimum: 0
          maximum: 1
    ProposalRequest:
      allOf:
        - $ref: '#/components/schemas/AnalyzeRequest'
        - type: object
          required: [baselineVersion, draftVersion, currentDraft]
          properties:
            baselineVersion:
              type: string
              description: Hash representing last approved version
            draftVersion:
              type: string
              description: Hash representing the local draft version
            currentDraft:
              type: string
            providerOptions:
              type: object
              properties:
                temperature:
                  type: number
                  minimum: 0
                  maximum: 2
                maxTokens:
                  type: integer
                  minimum: 1
            requestId:
              type: string
              description: Client-generated correlation ID
    ProposalResponse:
      type: object
      required: [proposal]
      properties:
        proposal:
          $ref: '#/components/schemas/Proposal'
        audit:
          $ref: '#/components/schemas/AuditMetadata'
    Proposal:
      type: object
      required: [proposalId, originTurnId, diff, renderMode, confidence]
      properties:
        proposalId:
          type: string
          format: uuid
        originTurnId:
          type: string
        diff:
          type: array
          items:
            $ref: '#/components/schemas/DiffSegment'
        renderMode:
          type: string
          enum: [split, unified]
        confidence:
          type: number
          minimum: 0
          maximum: 1
        citations:
          type: array
          items:
            type: string
        expiresAt:
          type: string
          format: date-time
    DiffSegment:
      type: object
      required: [segmentId, type, value]
      properties:
        segmentId:
          type: string
        type:
          type: string
          enum: [added, removed, context]
        value:
          type: string
        originTurnId:
          type: string
        rationale:
          type: string
    AuditMetadata:
      type: object
      required: [sessionId, requestId]
      properties:
        sessionId:
          type: string
        requestId:
          type: string
        responseMs:
          type: integer
        model:
          type: string
    ConflictResponse:
      type: object
      required: [code, message, conflicts]
      properties:
        code:
          type: string
          enum: [BASELINE_MISMATCH, SCOPE_VIOLATION]
        message:
          type: string
        conflicts:
          type: array
          items:
            type: object
            required: [reason]
            properties:
              reason:
                type: string
              serverVersion:
                type: string
    ApplyRequest:
      type: object
      required: [sessionId, proposalId, draftPatch, diffHash]
      properties:
        sessionId:
          type: string
        proposalId:
          type: string
          format: uuid
        draftPatch:
          type: string
          description: Git-style patch produced by editor-core
        diffHash:
          type: string
        approvalNotes:
          type: string
          maxLength: 280
    ApplyResponse:
      type: object
      required: [status, changelog]
      properties:
        status:
          type: string
          enum: [queued]
        changelog:
          type: object
          required: [entryId, summary]
          properties:
            entryId:
              type: string
            summary:
              type: string
            confidence:
              type: number
            citations:
              type: array
              items:
                type: string
    ErrorResponse:
      type: object
      required: [code, message]
      properties:
        code:
          type: string
        message:
          type: string
        details:
          type: object
          additionalProperties:
            type: string
    RejectProposalRequest:
      type: object
      required: [sessionId, proposalId]
      properties:
        sessionId:
          type: string
        proposalId:
          type: string
    TeardownSessionRequest:
      type: object
      required: [sessionId]
      properties:
        sessionId:
          type: string
        reason:
          type: string
          enum: [manual, section-change, navigation, logout]
security:
  - clerkSession: []
